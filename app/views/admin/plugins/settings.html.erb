<div class="max-w-4xl mx-auto py-8">
  <!-- Header -->
  <div class="mb-8">
    <div class="flex items-center justify-between mb-4">
      <div>
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">
          <%= @plugin.name %> Settings
        </h1>
        <p class="text-gray-600 dark:text-gray-400">
          <%= @plugin.description %>
        </p>
      </div>
      
      <%= link_to admin_plugins_path, class: "px-4 py-2 text-gray-700 dark:text-gray-300 hover:text-gray-900" do %>
        ‚Üê Back to Plugins
      <% end %>
    </div>
  </div>

  <!-- Settings Form -->
  <%= form_with url: update_settings_admin_plugin_path(@plugin), method: :patch, class: 'space-y-6' do |f| %>
    <% if @schema %>
      <!-- Schema-based settings -->
      <%= render_plugin_settings_form(@plugin_instance, @plugin_settings) %>
    <% else %>
      <!-- Fallback: Generic settings form -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          Plugin Settings
        </h2>
        
        <p class="text-gray-600 dark:text-gray-400 mb-4">
          This plugin doesn't define a settings schema. You can manually edit settings in JSON format or the plugin author needs to implement a settings schema.
        </p>
        
        <div class="space-y-4">
          <%= label_tag 'plugin_settings', 'Settings (JSON)', class: 'block text-sm font-medium text-gray-700 dark:text-gray-300' %>
          <%= text_area_tag 'plugin[settings]', @plugin_settings.to_json, 
              rows: 12,
              class: 'w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-indigo-500 dark:bg-gray-900 dark:text-green-400 font-mono text-sm',
              placeholder: '{"key": "value"}' %>
          <p class="text-sm text-gray-500 dark:text-gray-400">
            Enter valid JSON. Example: <code class="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">{"enabled": true, "api_key": "xyz"}</code>
          </p>
        </div>
      </div>
    <% end %>

    <!-- Submit Button -->
    <div class="flex items-center justify-between pt-6 border-t border-gray-200 dark:border-gray-700">
      <%= link_to "Cancel", admin_plugins_path, class: "px-4 py-2 text-gray-700 dark:text-gray-300 hover:text-gray-900" %>
      <%= f.submit "Save Settings", class: "px-6 py-2 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-lg transition cursor-pointer" %>
    </div>
  <% end %>

  <!-- Schema Info (for developers) -->
  <% if Rails.env.development? && @schema %>
    <div class="mt-8 bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 rounded-lg p-6">
      <h3 class="text-lg font-semibold text-blue-900 dark:text-blue-100 mb-2">
        Developer Info
      </h3>
      <p class="text-sm text-blue-800 dark:text-blue-200 mb-3">
        This plugin uses the Settings Schema API. Fields are automatically validated and rendered.
      </p>
      <details class="text-sm">
        <summary class="cursor-pointer text-blue-600 dark:text-blue-400 font-medium">
          View Schema Definition
        </summary>
        <pre class="mt-3 bg-gray-900 text-green-400 p-4 rounded overflow-x-auto"><%= JSON.pretty_generate({
          sections: @schema.sections.map { |s| 
            {
              title: s.title,
              description: s.description,
              fields: s.fields.map { |f|
                {
                  key: f.key,
                  label: f.label,
                  type: f.input_type,
                  required: f.required?,
                  default: f.default
                }
              }
            }
          }
        }) %></pre>
      </details>
    </div>
  <% end %>
</div>
