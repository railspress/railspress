<% content_for :title, "Content Types" %>

<link href="https://cdn.jsdelivr.net/npm/tabulator-tables@6.2.1/dist/css/tabulator_midnight.min.css" rel="stylesheet">
<%= stylesheet_link_tag "tabulator_custom", "data-turbo-track": "reload" %>

<div class="max-w-7xl mx-auto px-0 sm:px-0">
  <% if notice.present? %>
    <div class="mb-6 p-4 bg-green-500/10 border border-green-500/20 rounded-xl">
      <p class="text-green-400 font-medium" id="notice"><%= notice %></p>
    </div>
  <% end %>
  
  <% if alert.present? %>
    <div class="mb-6 p-4 bg-red-500/10 border border-red-500/20 rounded-xl">
      <p class="text-red-400 font-medium" id="alert"><%= alert %></p>
    </div>
  <% end %>

  <div class="flex justify-between items-center mb-8">
    <div>
      <h1 class="text-3xl font-bold text-white mb-2">Content Types</h1>
      <p class="text-gray-400">Manage custom post types for your site</p>
    </div>
    <div class="flex items-center gap-3">
        <%= link_to new_admin_content_type_path, class: "bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 font-medium" do %>
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
        </svg>
        New Content Type
      <% end %>
    </div>
  </div>

  <!-- Stats Cards -->
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
    <div class="bg-[#1a1a1a] border border-[#2a2a2a] rounded-xl p-6">
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <svg class="w-8 h-8 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-400">Total Types</p>
          <p class="text-2xl font-bold text-white"><%= ContentType.count %></p>
        </div>
      </div>
    </div>
    
    <div class="bg-[#1a1a1a] border border-[#2a2a2a] rounded-xl p-6">
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <svg class="w-8 h-8 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-400">Active</p>
          <p class="text-2xl font-bold text-white"><%= ContentType.active.count %></p>
        </div>
      </div>
    </div>
    
    <div class="bg-[#1a1a1a] border border-[#2a2a2a] rounded-xl p-6">
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <svg class="w-8 h-8 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-400">Public</p>
          <p class="text-2xl font-bold text-white"><%= ContentType.public_types.count %></p>
        </div>
      </div>
    </div>
  </div>

  <!-- Tabulator Table -->
  <div class="bg-[#1a1a1a] border border-[#2a2a2a] rounded-xl overflow-hidden">
    <div id="content-types-table"></div>
  </div>
</div>

<script>
  async function initContentTypesTable() {
    const tableElement = document.getElementById('content-types-table');
    if (!tableElement) return;
    
    // Destroy existing table if it exists
    if (tableElement._tabulator) {
      tableElement._tabulator.destroy();
    }
    
    // Load Tabulator if not already loaded
    if (typeof Tabulator === 'undefined') {
      const { TabulatorFull: Tabulator } = await import("tabulator-tables");
      window.Tabulator = Tabulator;
    }
    
    const table = new window.Tabulator("#content-types-table", {
      ajaxURL: "<%= admin_content_types_path(format: :json) %>",
      layout: "fitColumns",
      responsiveLayout: "hide",
      pagination: true,
      paginationSize: 25,
      paginationSizeSelector: [10, 25, 50, 100],
      movableColumns: true,
      resizableRows: true,
      placeholder: "No Content Types Found",
      columns: [
        {
          title: "Identifier",
          field: "ident",
          sorter: "string",
          headerFilter: "input",
          width: 150,
          formatter: function(cell) {
            const value = cell.getValue();
            return `<code class="px-2 py-1 bg-[#0a0a0a] text-indigo-400 rounded text-sm">${value}</code>`;
          }
        },
        {
          title: "Label",
          field: "label",
          sorter: "string",
          headerFilter: "input",
          formatter: function(cell) {
            const row = cell.getRow().getData();
            return `<div class="py-2">
              <a href="/admin/content_types/${row.id}/edit" class="text-white hover:text-indigo-400 font-medium">
                ${row.label}
              </a>
              <div class="text-xs text-gray-500 mt-1">
                ${row.singular} / ${row.plural}
              </div>
            </div>`;
          }
        },
        {
          title: "Posts",
          field: "posts_count",
          sorter: "number",
          width: 100,
          hozAlign: "center",
          formatter: function(cell) {
            return `<span class="text-gray-300">${cell.getValue()}</span>`;
          }
        },
        {
          title: "Public",
          field: "public",
          sorter: "boolean",
          width: 100,
          hozAlign: "center",
          formatter: function(cell) {
            const isPublic = cell.getValue();
            return isPublic ? 
              '<span class="text-green-400">âœ“</span>' : 
              '<span class="text-gray-600">â€”</span>';
          }
        },
        {
          title: "Hierarchical",
          field: "hierarchical",
          sorter: "boolean",
          width: 120,
          hozAlign: "center",
          formatter: function(cell) {
            const value = cell.getValue();
            return value ? 
              '<span class="text-green-400">âœ“</span>' : 
              '<span class="text-gray-600">â€”</span>';
          }
        },
        {
          title: "Archive",
          field: "has_archive",
          sorter: "boolean",
          width: 100,
          hozAlign: "center",
          formatter: function(cell) {
            const value = cell.getValue();
            return value ? 
              '<span class="text-green-400">âœ“</span>' : 
              '<span class="text-gray-600">â€”</span>';
          }
        },
        {
          title: "Status",
          field: "active",
          sorter: "boolean",
          width: 100,
          formatter: function(cell) {
            const active = cell.getValue();
            return active ?
              '<span class="px-2 py-1 rounded-md text-xs font-medium bg-emerald-500/10 text-emerald-400">ACTIVE</span>' :
              '<span class="px-2 py-1 rounded-md text-xs font-medium bg-gray-500/10 text-gray-400">INACTIVE</span>';
          }
        },
        {
          title: "Created",
          field: "created_at",
          sorter: "string",
          width: 150,
          formatter: function(cell) {
            return `<span class="text-gray-400 text-sm">${cell.getValue()}</span>`;
          }
        },
        {
          title: "Actions",
          field: "actions",
          headerSort: false,
          width: 150,
          formatter: function(cell) {
            const row = cell.getRow().getData();
            const isDefaultType = row.ident === 'post';
            
            return `<div class="flex items-center space-x-1">
              <a href="/admin/content_types/${row.id}/edit" 
                 class="p-2 text-gray-400 hover:text-indigo-400 rounded-lg hover:bg-indigo-500/10 transition"
                 title="Edit">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                </svg>
              </a>
              ${!isDefaultType ? 
                `<a href="/admin/content_types/${row.id}" data-turbo-method="delete" data-turbo-confirm="Delete this content type? All posts will remain but lose their type association."
                   class="p-2 text-gray-400 hover:text-red-400 rounded-lg hover:bg-red-500/10 transition"
                   title="Delete">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                  </svg>
                </a>` :
                '<span class="p-2 text-gray-700" title="Cannot delete default type">ðŸ”’</span>'
              }
            </div>`;
          }
        }
      ],
    });
  }
  
  // Initialize on page load
  document.addEventListener('turbo:load', initContentTypesTable);
  document.addEventListener('DOMContentLoaded', initContentTypesTable);
  
  // Cleanup before Turbo caches the page
  document.addEventListener('turbo:before-cache', function() {
    const tableElement = document.getElementById('content-types-table');
    if (tableElement && tableElement._tabulator) {
      tableElement._tabulator.destroy();
    }
  });
</script>

