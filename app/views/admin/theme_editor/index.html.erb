<!-- Theme File Editor with Monaco Editor -->
<div class="h-screen flex flex-col">
  <!-- Header -->
  <div class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4">
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-1">
          Theme Editor
        </h1>
        <p class="text-sm text-gray-600 dark:text-gray-400">
          Editing theme: <span class="font-semibold"><%= @active_theme %></span>
        </p>
      </div>
      
      <div class="flex items-center space-x-3">
        <!-- Search -->
        <button onclick="openSearch()" class="px-4 py-2 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-lg transition">
          <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
          </svg>
          Search in Files
        </button>
        
        <!-- Back to Themes -->
        <%= link_to admin_themes_path, class: "px-4 py-2 text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition" do %>
          ← Back to Themes
        <% end %>
      </div>
    </div>
  </div>

  <!-- Flash Messages -->
  <div id="flash-messages">
    <%= render 'admin/shared/flash' if notice || alert %>
  </div>

  <!-- Main Editor Layout -->
  <div class="flex-1 flex overflow-hidden">
    <!-- File Browser Sidebar -->
    <div class="w-80 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 overflow-y-auto">
      <div class="p-4 border-b border-gray-200 dark:border-gray-700">
        <button onclick="openCreateFileDialog()" class="w-full px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition flex items-center justify-center">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
          </svg>
          New File
        </button>
      </div>
      
      <div class="p-4">
        <div id="file-tree">
          <%= render 'file_tree', files: @file_tree %>
        </div>
      </div>
    </div>

    <!-- Editor Panel -->
    <div class="flex-1 flex flex-col overflow-hidden">
      <% if @current_file_path %>
        <!-- Editor Toolbar -->
        <div class="bg-gray-50 dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 px-6 py-3 flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <span class="text-sm font-medium text-gray-700 dark:text-gray-300">
              <%= @current_file_path %>
            </span>
            <span class="text-xs text-gray-500 dark:text-gray-400">
              <%= File.extname(@current_file_path).upcase.delete('.') %>
            </span>
          </div>
          
          <div class="flex items-center space-x-2">
            <!-- Format Button -->
            <button onclick="formatCode()" class="px-3 py-1.5 text-sm bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 rounded transition">
              Format
            </button>
            
            <!-- Find/Replace -->
            <button onclick="openFindReplace()" class="px-3 py-1.5 text-sm bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 rounded transition">
              Find
            </button>
            
            <!-- Versions -->
            <button onclick="openVersions()" class="px-3 py-1.5 text-sm bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 rounded transition">
              <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              Versions (<%= @file_versions.count %>)
            </button>
            
            <!-- Actions Dropdown -->
            <div class="relative group">
              <button class="px-3 py-1.5 text-sm bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 rounded transition">
                Actions ▾
              </button>
              <div class="absolute right-0 mt-1 w-48 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg hidden group-hover:block z-10">
                <button onclick="renameFile('<%= j @current_file_path %>')" class="block w-full text-left px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700">
                  Rename
                </button>
                <a href="/admin/theme_editor/<%= ERB::Util.url_encode(@current_file_path) %>/download" class="block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700">
                  Download
                </a>
                <button onclick="deleteFile('<%= j @current_file_path %>')" class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100 dark:hover:bg-gray-700">
                  Delete
                </button>
              </div>
            </div>
            
            <!-- Preview -->
            <button onclick="openPreview()" class="px-3 py-1.5 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded transition">
              <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
              </svg>
              Preview
            </button>
            
            <!-- Save Button -->
            <button onclick="saveFile()" class="px-6 py-1.5 text-sm bg-green-600 hover:bg-green-700 text-white rounded-lg transition font-medium">
              Save File
            </button>
          </div>
        </div>
        
        <!-- Monaco Editor Container -->
        <div id="file-editor" class="flex-1 overflow-hidden">
          <%= render 'editor', file_path: @current_file_path, content: @file_content, versions: @file_versions || [] %>
        </div>
      <% else %>
        <!-- Empty State -->
        <div class="flex-1 flex items-center justify-center text-gray-500 dark:text-gray-400">
          <div class="text-center">
            <svg class="w-20 h-20 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
            <p class="text-lg font-medium mb-2">Select a file to edit</p>
            <p class="text-sm">Choose a file from the sidebar to start editing</p>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>

<!-- Monaco Editor Scripts -->
<%= javascript_include_tag "https://cdn.jsdelivr.net/npm/monaco-editor@0.45.0/min/vs/loader.js", defer: true, "data-turbo-track": "reload" %>

<!-- SweetAlert2 for Confirmations -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  let editor = null;
  let currentFile = '<%= j @current_file_path %>';
  
  // Initialize Monaco Editor
  document.addEventListener('DOMContentLoaded', function() {
    <% if @current_file_path %>
      initMonacoEditor();
    <% end %>
  });
  
  document.addEventListener('turbo:load', function() {
    <% if @current_file_path %>
      if (!editor) {
        initMonacoEditor();
      }
    <% end %>
  });
  
  function initMonacoEditor() {
    require.config({ paths: { vs: 'https://cdn.jsdelivr.net/npm/monaco-editor@0.45.0/min/vs' } });
    
    require(['vs/editor/editor.main'], function() {
      const container = document.getElementById('monaco-container');
      if (!container) return;
      
      // Detect language from file extension
      const fileExt = '<%= @current_file_path ? File.extname(@current_file_path) : '' %>';
      const languageMap = {
        '.rb': 'ruby',
        '.erb': 'html',
        '.html': 'html',
        '.css': 'css',
        '.scss': 'scss',
        '.sass': 'scss',
        '.js': 'javascript',
        '.json': 'json',
        '.yml': 'yaml',
        '.yaml': 'yaml',
        '.md': 'markdown'
      };
      
      const language = languageMap[fileExt] || 'plaintext';
      
      // Create editor
      editor = monaco.editor.create(container, {
        value: <%= (@file_content || '').to_json.html_safe %>,
        language: language,
        theme: 'vs-dark',
        automaticLayout: true,
        fontSize: 14,
        lineNumbers: 'on',
        minimap: { enabled: true },
        scrollBeyondLastLine: false,
        wordWrap: 'on',
        tabSize: 2,
        insertSpaces: true,
        formatOnPaste: true,
        formatOnType: true
      });
      
      // Keyboard shortcuts
      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, function() {
        saveFile();
      });
      
      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyF, function() {
        editor.getAction('actions.find').run();
      });
    });
  }
  
  // Save file
  function saveFile() {
    if (!editor) {
      Swal.fire('Error', 'Editor not initialized', 'error');
      return;
    }
    
    if (!currentFile) {
      Swal.fire('Error', 'No file selected', 'error');
      return;
    }
    
    const content = editor.getValue();
    const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
    
    fetch('<%= @current_file_path ? admin_theme_editor_path(@current_file_path) : '#' %>', {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken,
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        file: {
          content: content
        }
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire({
          icon: 'success',
          title: 'Saved!',
          text: data.message,
          toast: true,
          position: 'top-end',
          timer: 3000,
          showConfirmButton: false
        });
      } else {
        Swal.fire('Error', data.errors.join(', '), 'error');
      }
    })
    .catch(error => {
      Swal.fire('Error', 'Failed to save file', 'error');
      console.error(error);
    });
  }
  
  // Format code
  function formatCode() {
    if (editor) {
      editor.getAction('editor.action.formatDocument').run();
    }
  }
  
  // Open find/replace
  function openFindReplace() {
    if (editor) {
      editor.getAction('actions.find').run();
    }
  }
  
  // Create new file
  function openCreateFileDialog() {
    Swal.fire({
      title: 'Create New File',
      html: `
        <input id="new-file-path" class="swal2-input" placeholder="views/shared/_new_file.html.erb">
        <p class="text-sm text-gray-600 mt-2">Enter the file path relative to theme root</p>
      `,
      showCancelButton: true,
      confirmButtonText: 'Create',
      preConfirm: () => {
        const filePath = document.getElementById('new-file-path').value;
        if (!filePath) {
          Swal.showValidationMessage('Please enter a file path');
          return false;
        }
        return filePath;
      }
    }).then((result) => {
      if (result.isConfirmed) {
        createFile(result.value);
      }
    });
  }
  
  // Create file
  function createFile(filePath) {
    const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
    
    fetch('/admin/theme_editor', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken,
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        file_path: filePath,
        content: ''
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire('Success', data.message, 'success').then(() => {
          window.location.href = '/admin/theme_editor?file=' + encodeURIComponent(data.file_path);
        });
      } else {
        Swal.fire('Error', data.errors.join(', '), 'error');
      }
    });
  }
  
  // Rename file
  function renameFile(oldPath) {
    if (!oldPath) {
      Swal.fire('Error', 'No file selected', 'error');
      return;
    }
    
    Swal.fire({
      title: 'Rename File',
      html: `
        <p class="text-sm text-gray-600 mb-2">Current: <code>${oldPath}</code></p>
        <input id="new-file-name" class="swal2-input" placeholder="New file path" value="${oldPath}">
      `,
      showCancelButton: true,
      confirmButtonText: 'Rename',
      preConfirm: () => {
        const newPath = document.getElementById('new-file-name').value;
        if (!newPath || newPath === oldPath) {
          Swal.showValidationMessage('Please enter a new file path');
          return false;
        }
        return newPath;
      }
    }).then((result) => {
      if (result.isConfirmed) {
        performRename(oldPath, result.value);
      }
    });
  }
  
  // Perform rename
  function performRename(oldPath, newPath) {
    const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
    
    fetch('/admin/theme_editor/rename', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken
      },
      body: JSON.stringify({
        old_path: oldPath,
        new_path: newPath
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire('Success', data.message, 'success').then(() => {
          window.location.href = '/admin/theme_editor?file=' + encodeURIComponent(data.new_path);
        });
      } else {
        Swal.fire('Error', data.errors.join(', '), 'error');
      }
    });
  }
  
  // Delete file
  function deleteFile(filePath) {
    if (!filePath) {
      Swal.fire('Error', 'No file selected', 'error');
      return;
    }
    
    Swal.fire({
      title: 'Delete File?',
      html: `Are you sure you want to delete <code>${filePath}</code>?<br><small class="text-gray-600">A backup will be created.</small>`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#dc2626',
      cancelButtonColor: '#6b7280',
      confirmButtonText: 'Yes, delete it'
    }).then((result) => {
      if (result.isConfirmed) {
        const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
        
        fetch('/admin/theme_editor/' + encodeURIComponent(filePath), {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': csrfToken
          }
        }).then(() => {
          window.location.href = '/admin/theme_editor';
        });
      }
    });
  }
  
  // Open search dialog
  function openSearch() {
    Swal.fire({
      title: 'Search in Files',
      input: 'text',
      inputPlaceholder: 'Enter search query...',
      showCancelButton: true,
      confirmButtonText: 'Search',
      showLoaderOnConfirm: true,
      preConfirm: (query) => {
        return fetch('/admin/theme_editor/search?query=' + encodeURIComponent(query))
          .then(response => response.json())
          .catch(error => {
            Swal.showValidationMessage('Search failed');
          });
      }
    }).then((result) => {
      if (result.isConfirmed) {
        displaySearchResults(result.value);
      }
    });
  }
  
  // Display search results
  function displaySearchResults(data) {
    const results = data.results;
    
    if (results.length === 0) {
      Swal.fire('No Results', 'No matches found', 'info');
      return;
    }
    
    const html = results.slice(0, 50).map(r => `
      <div class="text-left border-b border-gray-200 dark:border-gray-700 p-3 hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer" onclick="window.location.href='/admin/theme_editor?file=${encodeURIComponent(r.file)}'">
        <div class="text-sm font-mono text-blue-600 dark:text-blue-400">${r.file}:${r.line}</div>
        <div class="text-xs text-gray-600 dark:text-gray-400 mt-1">${escapeHtml(r.content)}</div>
      </div>
    `).join('');
    
    Swal.fire({
      title: `Found ${results.length} matches`,
      html: `<div class="max-h-96 overflow-y-auto text-left">${html}</div>`,
      width: '800px',
      showConfirmButton: false,
      showCloseButton: true
    });
  }
  
  // Open versions panel
  function openVersions() {
    // Toggle versions sidebar
    const versionsPanel = document.getElementById('versions-panel');
    if (versionsPanel) {
      versionsPanel.classList.toggle('hidden');
    }
  }
  
  // Open preview
  function openPreview() {
    const previewUrl = '<%= root_url rescue 'http://localhost:3000/' %>';
    window.open(previewUrl, '_blank', 'width=1200,height=800');
  }
  
  // Utility function
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
  
  // Warn before leaving with unsaved changes
  let hasUnsavedChanges = false;
  
  if (editor) {
    editor.onDidChangeModelContent(() => {
      hasUnsavedChanges = true;
    });
  }
  
  window.addEventListener('beforeunload', (e) => {
    if (hasUnsavedChanges) {
      e.preventDefault();
      e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
    }
  });
  
  // Reset unsaved changes flag on save
  function saveFile() {
    // ... existing save code ...
    hasUnsavedChanges = false;
  }
</script>

<style>
  #monaco-container {
    height: 100%;
    width: 100%;
  }
  
  .file-tree-item {
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.375rem;
    transition: background-color 0.15s;
  }
  
  .file-tree-item:hover {
    background-color: rgba(99, 102, 241, 0.1);
  }
  
  .file-tree-item.active {
    background-color: rgba(99, 102, 241, 0.2);
    font-weight: 600;
  }
  
  .file-icon {
    width: 1rem;
    height: 1rem;
    margin-right: 0.5rem;
  }
</style>

