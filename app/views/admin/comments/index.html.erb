<% content_for :title, "Comments" %>

<link href="https://cdn.jsdelivr.net/npm/tabulator-tables@6.2.1/dist/css/tabulator_midnight.min.css" rel="stylesheet">
<%= stylesheet_link_tag "tabulator_custom", "data-turbo-track": "reload" %>

<div class="max-w-7xl mx-auto px-0 sm:px-0">
  <% if notice.present? %>
    <div class="mb-6 p-4 bg-green-500/10 border border-green-500/20 rounded-xl">
      <p class="text-green-400 font-medium" id="notice"><%= notice %></p>
    </div>
  <% end %>

  <div class="flex justify-between items-center mb-8">
    <div>
      <h1 class="text-3xl font-bold text-white mb-2">Comments</h1>
      <p class="text-gray-400">Manage comments and discussions</p>
    </div>
  </div>

  <!-- Stats Cards -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <div class="bg-[#1a1a1a] border border-[#2a2a2a] rounded-xl p-6">
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <svg class="w-8 h-8 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-400">Total Comments</p>
          <p class="text-2xl font-bold text-white"><%= @comments&.count || 0 %></p>
        </div>
      </div>
    </div>
    
    <div class="bg-[#1a1a1a] border border-[#2a2a2a] rounded-xl p-6">
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <svg class="w-8 h-8 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-400">Approved</p>
          <p class="text-2xl font-bold text-white"><%= @comments&.select { |c| c.status == 'approved' }&.count || 0 %></p>
        </div>
      </div>
    </div>
    
    <div class="bg-[#1a1a1a] border border-[#2a2a2a] rounded-xl p-6">
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <svg class="w-8 h-8 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-400">Pending</p>
          <p class="text-2xl font-bold text-white"><%= @comments&.select { |c| c.status == 'pending' }&.count || 0 %></p>
        </div>
      </div>
    </div>
    
    <div class="bg-[#1a1a1a] border border-[#2a2a2a] rounded-xl p-6">
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <svg class="w-8 h-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728"/>
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-400">Spam</p>
          <p class="text-2xl font-bold text-white"><%= @comments&.select { |c| c.status == 'spam' }&.count || 0 %></p>
        </div>
      </div>
    </div>
  </div>

  <!-- Filters and Bulk Actions -->
  <div class="bg-[#1a1a1a] border border-[#2a2a2a] rounded-xl p-4 mb-4">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <select id="bulk-action" class="px-4 py-2 bg-[#0a0a0a] border border-[#2a2a2a] text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
          <option value="">Bulk Actions</option>
          <option value="approve">Approve</option>
          <option value="unapprove">Unapprove</option>
          <option value="spam">Mark as Spam</option>
          <option value="delete">Delete</option>
        </select>
        <button id="apply-bulk" class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition">
          Apply
        </button>
      </div>
      
      <div class="flex items-center space-x-2">
        <input type="text" id="search-input" placeholder="Search comments..." 
               class="px-4 py-2 bg-[#0a0a0a] border border-[#2a2a2a] text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
        <select id="status-filter" class="px-4 py-2 bg-[#0a0a0a] border border-[#2a2a2a] text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
          <option value="">All Statuses</option>
          <option value="approved">Approved</option>
          <option value="pending">Pending</option>
          <option value="spam">Spam</option>
        </select>
      </div>
    </div>
  </div>

  <!-- Tabulator Table -->
  <div class="bg-[#1a1a1a] border border-[#2a2a2a] rounded-xl overflow-hidden">
    <div id="comments-table"></div>
  </div>
</div>

<script>
  async function initCommentsTable() {
    const tableElement = document.getElementById('comments-table');
    if (!tableElement) return;
    
    // Destroy existing table if it exists
    if (tableElement._tabulator) {
      tableElement._tabulator.destroy();
    }
    
    // Load Tabulator if not already loaded
    if (typeof Tabulator === 'undefined') {
      const { TabulatorFull: Tabulator } = await import("tabulator-tables");
      window.Tabulator = Tabulator;
    }
    
    const table = new window.Tabulator("#comments-table", {
      data: <%= raw @comments_data.to_json %>,
      layout: "fitColumns",
      responsiveLayout: "hide",
      pagination: true,
      paginationSize: 25,
      paginationSizeSelector: [10, 25, 50, 100],
      movableColumns: true,
      resizableRows: true,
      selectable: true,
      placeholder: "No Comments Found",
      columns: [
        {
          formatter: "rowSelection",
          titleFormatter: "rowSelection",
          hozAlign: "center",
          headerSort: false,
          width: 40
        },
        {
          title: "Author",
          field: "author_name",
          sorter: "string",
          headerFilter: "input",
          width: 150,
          formatter: function(cell) {
            const row = cell.getRow().getData();
            return `<div class="py-2">
              <div class="text-white font-medium">${row.author_name}</div>
              ${row.author_email ? `<div class="text-xs text-gray-500">${row.author_email}</div>` : ''}
            </div>`;
          }
        },
        {
          title: "Comment",
          field: "content",
          sorter: "string",
          headerFilter: "input",
          formatter: function(cell) {
            const content = cell.getValue();
            const truncated = content.length > 100 ? content.substring(0, 100) + '...' : content;
            return `<div class="py-2 text-gray-300">${truncated}</div>`;
          }
        },
        {
          title: "On",
          field: "commentable_title",
          sorter: "string",
          width: 200,
          formatter: function(cell) {
            const row = cell.getRow().getData();
            return `<div class="py-2">
              <div class="text-gray-300">${row.commentable_title}</div>
              <div class="text-xs text-gray-500">${row.commentable_type}</div>
            </div>`;
          }
        },
        {
          title: "Status",
          field: "status",
          sorter: "string",
          width: 120,
          formatter: function(cell) {
            const status = cell.getValue();
            const colors = {
              'approved': 'bg-green-500/10 text-green-400',
              'pending': 'bg-yellow-500/10 text-yellow-400',
              'spam': 'bg-red-500/10 text-red-400'
            };
            const color = colors[status] || 'bg-gray-500/10 text-gray-400';
            return `<span class="px-2 py-1 rounded-md text-xs font-medium ${color}">${status.toUpperCase()}</span>`;
          }
        },
        {
          title: "Date",
          field: "created_at",
          sorter: "string",
          width: 150,
          formatter: function(cell) {
            return `<span class="text-gray-400 text-sm">${cell.getValue()}</span>`;
          }
        },
        {
          title: "Actions",
          field: "actions",
          headerSort: false,
          width: 200,
          formatter: function(cell) {
            const row = cell.getRow().getData();
            const status = row.status;
            const isApproved = status === 'approved';
            
            return `<div class="flex items-center space-x-1">
              <a href="/admin/comments/${row.id}" 
                 class="p-2 text-gray-400 hover:text-blue-400 rounded-lg hover:bg-blue-500/10 transition"
                 title="View">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                </svg>
              </a>
              <a href="/admin/comments/${row.id}/edit" 
                 class="p-2 text-gray-400 hover:text-indigo-400 rounded-lg hover:bg-indigo-500/10 transition"
                 title="Edit">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                </svg>
              </a>
              ${isApproved ? 
                `<a href="/admin/comments/${row.id}?comment[status]=pending" data-turbo-method="patch"
                    class="p-2 text-gray-400 hover:text-orange-400 rounded-lg hover:bg-orange-500/10 transition"
                    title="Unapprove">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728"/>
                  </svg>
                </a>` :
                `<a href="/admin/comments/${row.id}?comment[status]=approved" data-turbo-method="patch"
                    class="p-2 text-gray-400 hover:text-green-400 rounded-lg hover:bg-green-500/10 transition"
                    title="Approve">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                  </svg>
                </a>`
              }
              <a href="/admin/comments/${row.id}" data-turbo-method="delete" data-turbo-confirm="Delete this comment?"
                 class="p-2 text-gray-400 hover:text-red-400 rounded-lg hover:bg-red-500/10 transition"
                 title="Delete">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                </svg>
              </a>
            </div>`;
          }
        }
      ],
    });

    // Search functionality
    document.getElementById('search-input').addEventListener('keyup', function(e) {
      table.setFilter("content", "like", this.value);
    });

    // Status filter
    document.getElementById('status-filter').addEventListener('change', function(e) {
      if(this.value) {
        table.setFilter("status", "=", this.value);
      } else {
        table.clearFilter();
      }
    });

    // Bulk actions
    document.getElementById('apply-bulk').addEventListener('click', function() {
      const action = document.getElementById('bulk-action').value;
      const selectedRows = table.getSelectedData();
      
      if(!action) {
        showWarningToast('Please select an action');
        return;
      }
      
      if(selectedRows.length === 0) {
        showWarningToast('Please select at least one comment');
        return;
      }
      
      if(action === 'delete' && !confirm(`Are you sure you want to delete ${selectedRows.length} comments?`)) {
        return;
      }
      
      const commentIds = selectedRows.map(row => row.id);
      
      fetch('/admin/comments/bulk_action', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
        },
        body: JSON.stringify({
          action_type: action,
          comment_ids: commentIds
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success || data.message) {
          showSuccessToast(data.message || 'Action completed successfully');
        } else {
          showErrorToast(data.error || 'Action failed');
        }
        table.replaceData();
        table.deselectRow();
        document.getElementById('bulk-action').value = '';
      })
      .catch(error => {
        console.error('Error:', error);
        showErrorToast('An error occurred. Please try again.');
      });
    });
  });
  
  // Initialize on page load
  document.addEventListener('turbo:load', initCommentsTable);
  document.addEventListener('DOMContentLoaded', initCommentsTable);
  
  // Cleanup before Turbo caches the page
  document.addEventListener('turbo:before-cache', function() {
    const tableElement = document.getElementById('comments-table');
    if (tableElement && tableElement._tabulator) {
      tableElement._tabulator.destroy();
    }
  });
</script>