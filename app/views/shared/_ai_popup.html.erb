<!-- AI Assistant Popup Modal -->
<div id="aiPopupModal" class="fixed inset-0 z-50 hidden">
  <div class="absolute inset-0 bg-black/50 backdrop-blur-sm" onclick="closeAiPopup()"></div>
  <div class="relative flex items-start justify-center min-h-screen pt-[5vh] px-4">
    <div class="w-full max-w-3xl bg-[#1a1a1a] border border-[#2a2a2a] rounded-xl shadow-2xl max-h-[90vh] flex flex-col">
      <!-- Header -->
      <div class="px-6 py-4 border-b border-[#2a2a2a]">
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-3">
            <div class="w-10 h-10 bg-indigo-500/10 rounded-lg flex items-center justify-center">
              <svg class="w-6 h-6 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
              </svg>
            </div>
            <div>
              <h3 class="text-lg font-semibold text-white">AI Assistant</h3>
              <p class="text-sm text-gray-400">Generate content with AI</p>
            </div>
          </div>
          <button onclick="closeAiPopup()" class="text-gray-400 hover:text-white transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Content -->
      <div class="p-6 flex-1 overflow-y-auto">
        <!-- Agent Selection -->
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-300 mb-3">Choose AI Agent</label>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
            <button onclick="selectAgent('post_writer')" class="agent-option p-4 bg-[#0a0a0a] border border-[#2a2a2a] rounded-lg hover:border-indigo-500 transition text-left" data-agent="post_writer">
              <div class="flex items-center gap-3">
                <div class="w-8 h-8 bg-blue-500/10 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                  </svg>
                </div>
                <div>
                  <h4 class="font-medium text-white">Post Writer</h4>
                  <p class="text-sm text-gray-400">Generate engaging blog posts</p>
                </div>
              </div>
            </button>
            
            <button onclick="selectAgent('content_summarizer')" class="agent-option p-4 bg-[#0a0a0a] border border-[#2a2a2a] rounded-lg hover:border-indigo-500 transition text-left" data-agent="content_summarizer">
              <div class="flex items-center gap-3">
                <div class="w-8 h-8 bg-green-500/10 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                  </svg>
                </div>
                <div>
                  <h4 class="font-medium text-white">Content Summarizer</h4>
                  <p class="text-sm text-gray-400">Summarize long content</p>
                </div>
              </div>
            </button>
            
            <button onclick="selectAgent('seo_analyzer')" class="agent-option p-4 bg-[#0a0a0a] border border-[#2a2a2a] rounded-lg hover:border-indigo-500 transition text-left" data-agent="seo_analyzer">
              <div class="flex items-center gap-3">
                <div class="w-8 h-8 bg-purple-500/10 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                  </svg>
                </div>
                <div>
                  <h4 class="font-medium text-white">SEO Analyzer</h4>
                  <p class="text-sm text-gray-400">Analyze and optimize SEO</p>
                </div>
              </div>
            </button>
            
            <button onclick="selectAgent('comments_analyzer')" class="agent-option p-4 bg-[#0a0a0a] border border-[#2a2a2a] rounded-lg hover:border-indigo-500 transition text-left" data-agent="comments_analyzer">
              <div class="flex items-center gap-3">
                <div class="w-8 h-8 bg-orange-500/10 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                  </svg>
                </div>
                <div>
                  <h4 class="font-medium text-white">Comments Analyzer</h4>
                  <p class="text-sm text-gray-400">Analyze comment sentiment</p>
                </div>
              </div>
            </button>
          </div>
        </div>
        
        <!-- Input Section -->
        <div id="inputSection" class="hidden">
          <!-- Topic/Input Field -->
          <div class="mb-4">
            <label id="inputLabel" class="block text-sm font-medium text-gray-300 mb-2">What do you want to write about?</label>
            <textarea id="aiInput" rows="4" placeholder="Enter your topic or content..." class="w-full px-4 py-3 bg-[#0a0a0a] border border-[#2a2a2a] text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none"></textarea>
          </div>
          
          <!-- Tone Selection (for Post Writer) -->
          <div id="toneSection" class="mb-4 hidden">
            <label class="block text-sm font-medium text-gray-300 mb-2">Tone</label>
            <select id="toneSelect" class="w-full px-4 py-3 bg-[#0a0a0a] border border-[#2a2a2a] text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
              <option value="professional">Professional</option>
              <option value="casual">Casual</option>
              <option value="friendly">Friendly</option>
              <option value="authoritative">Authoritative</option>
              <option value="conversational">Conversational</option>
              <option value="technical">Technical</option>
            </select>
          </div>
          
          <!-- Additional Options -->
          <div id="additionalOptions" class="mb-4 hidden">
            <button type="button" onclick="toggleAdditionalOptions()" class="text-sm text-gray-400 hover:text-gray-300 transition-colors mb-2">
              Additional Options...
            </button>
            <div id="additionalOptionsContent" class="hidden">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label class="block text-xs text-gray-400 mb-1">Word Count</label>
                  <select id="wordCount" class="w-full px-3 py-2 bg-[#0a0a0a] border border-[#2a2a2a] text-white rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                    <option value="500-800">Short (500-800 words)</option>
                    <option value="800-1200" selected>Medium (800-1200 words)</option>
                    <option value="1200-2000">Long (1200-2000 words)</option>
                  </select>
                </div>
                <div>
                  <label class="block text-xs text-gray-400 mb-1">Target Keywords</label>
                  <input type="text" id="targetKeywords" placeholder="keyword1, keyword2" class="w-full px-3 py-2 bg-[#0a0a0a] border border-[#2a2a2a] text-white rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Result Section -->
        <div id="resultSection" class="hidden">
          <label class="block text-sm font-medium text-gray-300 mb-2">Generated Content</label>
          <div class="bg-[#0a0a0a] border border-[#2a2a2a] rounded-lg overflow-hidden">
            <!-- Hidden Trix editor for HTML rendering -->
            <div id="aiResultPreview" class="trix-content bg-transparent text-white p-4 max-h-64 overflow-y-auto" style="min-height: 200px;"></div>
            <!-- Hidden textarea to store the raw content -->
            <textarea id="aiResult" class="hidden"></textarea>
          </div>
        </div>
        
        <!-- Error Section -->
        <div id="errorSection" class="hidden mb-4">
          <div class="p-4 bg-red-500/10 border border-red-500/20 rounded-lg">
            <div class="flex items-center gap-2 mb-2">
              <svg class="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <h4 class="font-medium text-red-400">Error</h4>
            </div>
            <p id="errorMessage" class="text-red-400 text-sm"></p>
          </div>
        </div>
      </div>
      
      <!-- Footer -->
      <div class="px-6 py-4 border-t border-[#2a2a2a] flex items-center justify-between">
        <div class="text-sm text-gray-400">
          <span id="selectedAgentInfo" class="hidden">Selected: <span id="selectedAgentName"></span></span>
        </div>
        <div class="flex items-center gap-3">
          <button onclick="generateContent()" id="generateButton" class="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-gray-200 hover:text-white rounded transition hidden">
            <span id="generateButtonText">Generate Content</span>
          </button>
          <button onclick="insertContent()" id="insertButton" class="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-gray-200 hover:text-white rounded transition hidden">
            Insert Content
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
let selectedAgent = null;
let generatedContent = '';

// Helper function to get post UUID from global RailsPress context
function getPostId() {
  return window.RailsPress?.getPostUuid() || 'new';
}

// Agent configurations
const agentConfigs = {
  post_writer: {
    name: 'Post Writer',
    inputLabel: 'What do you want to write about?',
    showTone: true,
    showOptions: true,
    placeholder: 'Enter the topic for your blog post...'
  },
  content_summarizer: {
    name: 'Content Summarizer',
    inputLabel: 'Content to summarize',
    showTone: false,
    showOptions: false,
    placeholder: 'Paste the content you want to summarize...'
  },
  seo_analyzer: {
    name: 'SEO Analyzer',
    inputLabel: 'Content to analyze',
    showTone: false,
    showOptions: false,
    placeholder: 'Paste the content you want to analyze for SEO...'
  },
  comments_analyzer: {
    name: 'Comments Analyzer',
    inputLabel: 'Comments to analyze',
    showTone: false,
    showOptions: false,
    placeholder: 'Paste the comments you want to analyze...'
  }
};

function openAiPopup() {
  document.getElementById('aiPopupModal').classList.remove('hidden');
  resetPopup();
  
  // Load saved prompt and response from localStorage
  const savedPrompt = localStorage.getItem('aipostprompt_' + getPostId());
  const savedReply = localStorage.getItem('aipostreply_' + getPostId());
  
  if (savedPrompt) {
    document.getElementById('aiInput').value = savedPrompt;
  }
  
  if (savedReply) {
    generatedContent = savedReply;
    document.getElementById('aiResult').value = savedReply;
    const previewHtml = renderEditorJSPreview(savedReply);
    document.getElementById('aiResultPreview').innerHTML = previewHtml;
    document.getElementById('resultSection').classList.remove('hidden');
    document.getElementById('insertButton').classList.remove('hidden');
  }
}

function openAiPopupWithPostWriter(event) {
  if (event) event.preventDefault();
  openAiPopup();
  
  setTimeout(() => {
    // Always use post_writer agent (generates HTML for all editors)
    const agentType = 'post_writer';
    
    // Auto-select post_writer agent FIRST (before hiding sections)
    selectAgent(agentType);
    
    // Hide the agent selection section
    document.querySelector('.grid.grid-cols-1.md\\:grid-cols-2').closest('.mb-6').style.display = 'none';
    
    // selectedAgentInfo is already hidden by resetPopup() in openAiPopup()
    
    // Load saved prompt and response
    const savedPrompt = localStorage.getItem('aipostprompt_' + getPostId());
    const savedReply = localStorage.getItem('aipostreply_' + getPostId());
    
    if (savedPrompt) {
      document.getElementById('aiInput').value = savedPrompt;
    }
    
    if (savedReply) {
      generatedContent = savedReply;
      document.getElementById('aiResult').value = savedReply;
      const previewHtml = renderEditorJSPreview(savedReply);
      document.getElementById('aiResultPreview').innerHTML = previewHtml;
      document.getElementById('resultSection').classList.remove('hidden');
      document.getElementById('insertButton').classList.remove('hidden');
    }
  }, 100);
}

function closeAiPopup() {
  document.getElementById('aiPopupModal').classList.add('hidden');
  resetPopup();
}

function resetPopup() {
  selectedAgent = null;
  generatedContent = '';
  
  // Reset UI
  document.querySelectorAll('.agent-option').forEach(option => {
    option.classList.remove('border-indigo-500', 'bg-indigo-500/5');
    option.classList.add('border-[#2a2a2a]');
  });
  
  document.getElementById('inputSection').classList.add('hidden');
  document.getElementById('resultSection').classList.add('hidden');
  document.getElementById('errorSection').classList.add('hidden');
  document.getElementById('generateButton').classList.add('hidden');
  document.getElementById('insertButton').classList.add('hidden');
  document.getElementById('selectedAgentInfo').classList.add('hidden');
  
  // Clear inputs
  document.getElementById('aiInput').value = '';
  document.getElementById('aiResult').value = '';
  document.getElementById('aiResultPreview').innerHTML = '';
  document.getElementById('errorMessage').textContent = '';
}

// Convert EditorJS JSON to HTML for preview
function renderEditorJSPreview(jsonContent) {
  try {
    const data = JSON.parse(jsonContent);
    if (!data.blocks || !Array.isArray(data.blocks)) {
      return jsonContent; // Not valid EditorJS JSON, return as-is
    }
    
    let html = '';
    data.blocks.forEach(block => {
      switch (block.type) {
        case 'header':
          html += `<h${block.data.level}>${block.data.text}</h${block.data.level}>`;
          break;
        case 'paragraph':
          html += `<p>${block.data.text}</p>`;
          break;
        case 'list':
          const tag = block.data.style === 'ordered' ? 'ol' : 'ul';
          html += `<${tag}>`;
          block.data.items.forEach(item => {
            html += `<li>${item}</li>`;
          });
          html += `</${tag}>`;
          break;
        case 'quote':
          html += `<blockquote><p>${block.data.text}</p>`;
          if (block.data.caption) {
            html += `<cite>${block.data.caption}</cite>`;
          }
          html += `</blockquote>`;
          break;
        case 'code':
          html += `<pre><code>${escapeHtml(block.data.code)}</code></pre>`;
          break;
        case 'delimiter':
          html += '<hr>';
          break;
        case 'warning':
          html += `<div class="warning-box"><strong>${block.data.title}</strong><p>${block.data.message}</p></div>`;
          break;
        case 'checklist':
          html += '<ul class="checklist">';
          block.data.items.forEach(item => {
            const checked = item.checked ? 'checked' : '';
            html += `<li class="checklist-item"><input type="checkbox" ${checked} disabled> ${item.text}</li>`;
          });
          html += '</ul>';
          break;
      }
    });
    return html;
  } catch (e) {
    return jsonContent; // Not JSON, return as-is
  }
}

function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

function selectAgent(agentType) {
  selectedAgent = agentType;
  const config = agentConfigs[agentType];
  
  // Update UI
  document.querySelectorAll('.agent-option').forEach(option => {
    option.classList.remove('border-indigo-500', 'bg-indigo-500/5');
    option.classList.add('border-[#2a2a2a]');
  });
  
  const selectedOption = document.querySelector(`[data-agent="${agentType}"]`);
  if (selectedOption) {
    selectedOption.classList.remove('border-[#2a2a2a]');
    selectedOption.classList.add('border-indigo-500', 'bg-indigo-500/5');
  }
  
  // Update input section
  document.getElementById('inputLabel').textContent = config.inputLabel;
  document.getElementById('aiInput').placeholder = config.placeholder;
  
  // Show/hide tone section
  if (config.showTone) {
    document.getElementById('toneSection').classList.remove('hidden');
  } else {
    document.getElementById('toneSection').classList.add('hidden');
  }
  
  // Show/hide additional options
  if (config.showOptions) {
    document.getElementById('additionalOptions').classList.remove('hidden');
    // Auto-expand additional options for Post Writer and EditorJS Writer
    if (agentType === 'post_writer' || agentType === 'editorjs_writer') {
      document.getElementById('additionalOptionsContent').classList.remove('hidden');
    }
  } else {
    document.getElementById('additionalOptions').classList.add('hidden');
  }
  
  // Show input section and generate button
  document.getElementById('inputSection').classList.remove('hidden');
  document.getElementById('generateButton').classList.remove('hidden');
  // Don't show selectedAgentInfo when called from openAiPopupWithPostWriter (it will be hidden)
  // document.getElementById('selectedAgentInfo').classList.remove('hidden');
  document.getElementById('selectedAgentName').textContent = config.name;
  
  // Save prompt to localStorage as user types (debounced)
  let saveTimeout;
  document.getElementById('aiInput').addEventListener('input', (e) => {
    clearTimeout(saveTimeout);
    saveTimeout = setTimeout(() => {
      localStorage.setItem('aipostprompt_' + getPostId(), e.target.value);
    }, 500);
  });
}

async function generateContent() {
  const input = document.getElementById('aiInput').value.trim();
  
  if (!input) {
    alert('Please enter some input');
    return;
  }
  
  const generateButton = document.getElementById('generateButton');
  const generateButtonText = document.getElementById('generateButtonText');
  
  generateButton.disabled = true;
  generateButtonText.textContent = 'Generating...';
  
  try {
    const context = {};
    
    // Add tone for post writer
    if (selectedAgent === 'post_writer') {
      context.tone = document.getElementById('toneSelect').value;
      context.word_count = document.getElementById('wordCount').value;
      context.keywords = document.getElementById('targetKeywords').value;
    }
    
    const response = await fetch(`/api/v1/ai_agents/execute/${selectedAgent}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        user_input: input,
        context: context
      })
    });
    
    const data = await response.json();
    
    if (data.success) {
      generatedContent = data.result;
      document.getElementById('aiResult').value = generatedContent;
      
      // Render preview based on agent type
      const previewHtml = renderEditorJSPreview(generatedContent);
      document.getElementById('aiResultPreview').innerHTML = previewHtml;
      
      // Save response to localStorage
      localStorage.setItem('aipostreply_' + getPostId(), generatedContent);
      
      document.getElementById('resultSection').classList.remove('hidden');
      document.getElementById('insertButton').classList.remove('hidden');
      document.getElementById('errorSection').classList.add('hidden');
    } else {
      throw new Error(data.error);
    }
  } catch (error) {
    document.getElementById('errorMessage').textContent = error.message;
    document.getElementById('errorSection').classList.remove('hidden');
    document.getElementById('resultSection').classList.add('hidden');
  } finally {
    generateButton.disabled = false;
    generateButtonText.textContent = 'Generate Content';
  }
}

function toggleAdditionalOptions() {
  const content = document.getElementById('additionalOptionsContent');
  if (content.classList.contains('hidden')) {
    content.classList.remove('hidden');
  } else {
    content.classList.add('hidden');
  }
}

async function insertContent() {
  if (!generatedContent) return;
  
  // Detect editor type from the wrapper
  const editorWrapper = document.querySelector('[data-editor-type]');
  const editorType = editorWrapper ? editorWrapper.dataset.editorType : null;
  
  // Try different insertion methods based on editor type
  if (editorType === 'editorjs') {
    // Find EditorJS controller
    const editorjsElement = document.querySelector('[data-controller*="editorjs"]');
    if (editorjsElement) {
      const controller = window.Stimulus.getControllerForElementAndIdentifier(editorjsElement, 'editorjs');
      if (controller && controller.editor) {
        try {
          // Import HTML to EditorJS converter
          const { htmlToEditorJS } = await import('editorjs_converter');
          
          // Convert HTML to EditorJS JSON
          const editorJSData = htmlToEditorJS(generatedContent);
          console.log('Converted HTML to EditorJS:', editorJSData);
          
          // Insert into EditorJS
          await controller.editor.render(editorJSData);
          
          // Trigger saveContent to populate content_json field
          if (controller.saveContent) {
            await controller.saveContent();
          }
          
          closeAiPopup();
          return;
        } catch (error) {
          console.error('EditorJS insertion failed:', error);
          alert('Failed to insert content: ' + error.message);
        }
      }
    }
  } else if (editorType === 'trix') {
    // Find Trix editor
    const trixEditor = document.querySelector('trix-editor');
    if (trixEditor) {
      trixEditor.editor.loadHTML(generatedContent);
      closeAiPopup();
      return;
    }
  } else if (editorType === 'ckeditor5') {
    // Find CKEditor instance
    const ckElement = document.querySelector('[data-controller*="ckeditor5"]');
    if (ckElement) {
      const controller = window.Stimulus.getControllerForElementAndIdentifier(ckElement, 'ckeditor5');
      if (controller && controller.editor) {
        controller.editor.setData(generatedContent);
        closeAiPopup();
        return;
      }
    }
  }
  
  // Fallback to original logic
  const contentEditor = document.querySelector('textarea[name*="content"]') || 
                       document.querySelector('.editor-content') ||
                       document.querySelector('#content') ||
                       document.querySelector('[contenteditable="true"]');
  
  if (contentEditor) {
    if (contentEditor.tagName === 'TEXTAREA') {
      contentEditor.value = generatedContent;
    } else if (contentEditor.contentEditable === 'true') {
      contentEditor.innerHTML = generatedContent;
    }
    
    // Trigger change event
    contentEditor.dispatchEvent(new Event('input', { bubbles: true }));
    
    closeAiPopup();
  } else {
    // Fallback: copy to clipboard
    navigator.clipboard.writeText(generatedContent).then(() => {
      alert('Content copied to clipboard!');
    }).catch(() => {
      alert('Generated content:\n\n' + generatedContent);
    });
  }
}
</script>

<style>
.agent-option:hover {
  border-color: #6366f1 !important;
}

.agent-option.selected {
  border-color: #6366f1 !important;
  background-color: rgba(99, 102, 241, 0.05) !important;
}

/* AI Result Preview Styling */
#aiResultPreview {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  line-height: 1.6;
}

#aiResultPreview h2 {
  font-size: 1.5rem;
  font-weight: 600;
  margin: 1rem 0 0.5rem 0;
  color: #ffffff;
}

#aiResultPreview h3 {
  font-size: 1.25rem;
  font-weight: 500;
  margin: 0.75rem 0 0.5rem 0;
  color: #e5e7eb;
}

#aiResultPreview p {
  margin: 0.5rem 0;
  color: #d1d5db;
}

#aiResultPreview:first-child h2 {
  margin-top: 0;
}

#aiResultPreview hr {
  border: none;
  border-top: 1px solid #2a2a2a;
  margin: 1rem 0;
}

#aiResultPreview ul, #aiResultPreview ol {
  margin: 0.5rem 0;
  padding-left: 1.5rem;
  color: #d1d5db;
}

#aiResultPreview li {
  margin: 0.25rem 0;
}

#aiResultPreview blockquote {
  margin: 1rem 0;
  padding: 1rem;
  border-left: 3px solid #6366f1;
  background-color: rgba(99, 102, 241, 0.05);
  color: #d1d5db;
}

#aiResultPreview blockquote cite {
  display: block;
  margin-top: 0.5rem;
  font-size: 0.875rem;
  color: #9ca3af;
  font-style: italic;
}

#aiResultPreview pre {
  background-color: #0a0a0a;
  border: 1px solid #2a2a2a;
  border-radius: 0.375rem;
  padding: 1rem;
  margin: 1rem 0;
  overflow-x: auto;
}

#aiResultPreview code {
  font-family: 'Courier New', monospace;
  font-size: 0.875rem;
  color: #60a5fa;
}

#aiResultPreview .warning-box {
  margin: 1rem 0;
  padding: 1rem;
  background-color: rgba(234, 179, 8, 0.1);
  border-left: 3px solid #eab308;
  border-radius: 0.375rem;
}

#aiResultPreview .warning-box strong {
  display: block;
  margin-bottom: 0.5rem;
  color: #fbbf24;
}

#aiResultPreview .warning-box p {
  margin: 0;
  color: #d1d5db;
}

#aiResultPreview .checklist {
  list-style: none;
  padding-left: 0;
}

#aiResultPreview .checklist-item {
  display: flex;
  align-items: start;
  margin: 0.5rem 0;
  color: #d1d5db;
}

#aiResultPreview .checklist-item input[type="checkbox"] {
  margin-right: 0.5rem;
  margin-top: 0.125rem;
}
</style>






