<!-- AI Assistant Popup Modal -->
<div id="aiPopupModal" class="fixed inset-0 z-50 hidden">
  <div class="absolute inset-0 bg-black/50 backdrop-blur-sm" onclick="closeAiPopup()"></div>
  <div class="relative flex items-start justify-center min-h-screen pt-[5vh] px-4">
    <div class="w-full max-w-3xl bg-[#1a1a1a] border border-[#2a2a2a] rounded-xl shadow-2xl">
      <!-- Header -->
      <div class="px-6 py-4 border-b border-[#2a2a2a]">
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-3">
            <div class="w-10 h-10 bg-indigo-500/10 rounded-lg flex items-center justify-center">
              <svg class="w-6 h-6 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
              </svg>
            </div>
            <div>
              <h3 class="text-lg font-semibold text-white">AI Assistant</h3>
              <p class="text-sm text-gray-400">Generate content with AI</p>
            </div>
          </div>
          <button onclick="closeAiPopup()" class="text-gray-400 hover:text-white transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Content -->
      <div class="p-6">
        <!-- Agent Selection -->
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-300 mb-3">Choose AI Agent</label>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
            <button onclick="selectAgent('post_writer')" class="agent-option p-4 bg-[#0a0a0a] border border-[#2a2a2a] rounded-lg hover:border-indigo-500 transition text-left" data-agent="post_writer">
              <div class="flex items-center gap-3">
                <div class="w-8 h-8 bg-blue-500/10 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                  </svg>
                </div>
                <div>
                  <h4 class="font-medium text-white">Post Writer</h4>
                  <p class="text-sm text-gray-400">Generate engaging blog posts</p>
                </div>
              </div>
            </button>
            
            <button onclick="selectAgent('content_summarizer')" class="agent-option p-4 bg-[#0a0a0a] border border-[#2a2a2a] rounded-lg hover:border-indigo-500 transition text-left" data-agent="content_summarizer">
              <div class="flex items-center gap-3">
                <div class="w-8 h-8 bg-green-500/10 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                  </svg>
                </div>
                <div>
                  <h4 class="font-medium text-white">Content Summarizer</h4>
                  <p class="text-sm text-gray-400">Summarize long content</p>
                </div>
              </div>
            </button>
            
            <button onclick="selectAgent('seo_analyzer')" class="agent-option p-4 bg-[#0a0a0a] border border-[#2a2a2a] rounded-lg hover:border-indigo-500 transition text-left" data-agent="seo_analyzer">
              <div class="flex items-center gap-3">
                <div class="w-8 h-8 bg-purple-500/10 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                  </svg>
                </div>
                <div>
                  <h4 class="font-medium text-white">SEO Analyzer</h4>
                  <p class="text-sm text-gray-400">Analyze and optimize SEO</p>
                </div>
              </div>
            </button>
            
            <button onclick="selectAgent('comments_analyzer')" class="agent-option p-4 bg-[#0a0a0a] border border-[#2a2a2a] rounded-lg hover:border-indigo-500 transition text-left" data-agent="comments_analyzer">
              <div class="flex items-center gap-3">
                <div class="w-8 h-8 bg-orange-500/10 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                  </svg>
                </div>
                <div>
                  <h4 class="font-medium text-white">Comments Analyzer</h4>
                  <p class="text-sm text-gray-400">Analyze comment sentiment</p>
                </div>
              </div>
            </button>
          </div>
        </div>
        
        <!-- Input Section -->
        <div id="inputSection" class="hidden">
          <!-- Topic/Input Field -->
          <div class="mb-4">
            <label id="inputLabel" class="block text-sm font-medium text-gray-300 mb-2">What do you want to write about?</label>
            <textarea id="aiInput" rows="4" placeholder="Enter your topic or content..." class="w-full px-4 py-3 bg-[#0a0a0a] border border-[#2a2a2a] text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none"></textarea>
          </div>
          
          <!-- Tone Selection (for Post Writer) -->
          <div id="toneSection" class="mb-4 hidden">
            <label class="block text-sm font-medium text-gray-300 mb-2">Tone</label>
            <select id="toneSelect" class="w-full px-4 py-3 bg-[#0a0a0a] border border-[#2a2a2a] text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
              <option value="professional">Professional</option>
              <option value="casual">Casual</option>
              <option value="friendly">Friendly</option>
              <option value="authoritative">Authoritative</option>
              <option value="conversational">Conversational</option>
              <option value="technical">Technical</option>
            </select>
          </div>
          
          <!-- Additional Options -->
          <div id="additionalOptions" class="mb-4 hidden">
            <label class="block text-sm font-medium text-gray-300 mb-2">Additional Options</label>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-xs text-gray-400 mb-1">Word Count</label>
                <select id="wordCount" class="w-full px-3 py-2 bg-[#0a0a0a] border border-[#2a2a2a] text-white rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                  <option value="500-800">Short (500-800 words)</option>
                  <option value="800-1200" selected>Medium (800-1200 words)</option>
                  <option value="1200-2000">Long (1200-2000 words)</option>
                </select>
              </div>
              <div>
                <label class="block text-xs text-gray-400 mb-1">Target Keywords</label>
                <input type="text" id="targetKeywords" placeholder="keyword1, keyword2" class="w-full px-3 py-2 bg-[#0a0a0a] border border-[#2a2a2a] text-white rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
              </div>
            </div>
          </div>
        </div>
        
        <!-- Result Section -->
        <div id="resultSection" class="hidden">
          <label class="block text-sm font-medium text-gray-300 mb-2">Generated Content</label>
          <div class="p-4 bg-[#0a0a0a] border border-[#2a2a2a] rounded-lg">
            <textarea id="aiResult" rows="12" readonly class="w-full bg-transparent text-white resize-none focus:outline-none"></textarea>
          </div>
        </div>
        
        <!-- Error Section -->
        <div id="errorSection" class="hidden mb-4">
          <div class="p-4 bg-red-500/10 border border-red-500/20 rounded-lg">
            <div class="flex items-center gap-2 mb-2">
              <svg class="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <h4 class="font-medium text-red-400">Error</h4>
            </div>
            <p id="errorMessage" class="text-red-400 text-sm"></p>
          </div>
        </div>
      </div>
      
      <!-- Footer -->
      <div class="px-6 py-4 border-t border-[#2a2a2a] flex items-center justify-between">
        <div class="text-sm text-gray-400">
          <span id="selectedAgentInfo" class="hidden">Selected: <span id="selectedAgentName"></span></span>
        </div>
        <div class="flex items-center gap-3">
          <button onclick="closeAiPopup()" class="px-4 py-2 bg-[#0a0a0a] hover:bg-[#111111] border border-[#2a2a2a] text-gray-300 hover:text-white rounded-lg transition">
            Cancel
          </button>
          <button onclick="generateContent()" id="generateButton" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition hidden">
            <span id="generateButtonText">Generate Content</span>
          </button>
          <button onclick="insertContent()" id="insertButton" class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition hidden">
            Insert Content
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
let selectedAgent = null;
let generatedContent = '';

// Agent configurations
const agentConfigs = {
  post_writer: {
    name: 'Post Writer',
    inputLabel: 'What do you want to write about?',
    showTone: true,
    showOptions: true,
    placeholder: 'Enter the topic for your blog post...'
  },
  content_summarizer: {
    name: 'Content Summarizer',
    inputLabel: 'Content to summarize',
    showTone: false,
    showOptions: false,
    placeholder: 'Paste the content you want to summarize...'
  },
  seo_analyzer: {
    name: 'SEO Analyzer',
    inputLabel: 'Content to analyze',
    showTone: false,
    showOptions: false,
    placeholder: 'Paste the content you want to analyze for SEO...'
  },
  comments_analyzer: {
    name: 'Comments Analyzer',
    inputLabel: 'Comments to analyze',
    showTone: false,
    showOptions: false,
    placeholder: 'Paste the comments you want to analyze...'
  }
};

function openAiPopup() {
  document.getElementById('aiPopupModal').classList.remove('hidden');
  resetPopup();
}

function closeAiPopup() {
  document.getElementById('aiPopupModal').classList.add('hidden');
  resetPopup();
}

function resetPopup() {
  selectedAgent = null;
  generatedContent = '';
  
  // Reset UI
  document.querySelectorAll('.agent-option').forEach(option => {
    option.classList.remove('border-indigo-500', 'bg-indigo-500/5');
    option.classList.add('border-[#2a2a2a]');
  });
  
  document.getElementById('inputSection').classList.add('hidden');
  document.getElementById('resultSection').classList.add('hidden');
  document.getElementById('errorSection').classList.add('hidden');
  document.getElementById('generateButton').classList.add('hidden');
  document.getElementById('insertButton').classList.add('hidden');
  document.getElementById('selectedAgentInfo').classList.add('hidden');
  
  // Clear inputs
  document.getElementById('aiInput').value = '';
  document.getElementById('aiResult').value = '';
  document.getElementById('errorMessage').textContent = '';
}

function selectAgent(agentType) {
  selectedAgent = agentType;
  const config = agentConfigs[agentType];
  
  // Update UI
  document.querySelectorAll('.agent-option').forEach(option => {
    option.classList.remove('border-indigo-500', 'bg-indigo-500/5');
    option.classList.add('border-[#2a2a2a]');
  });
  
  const selectedOption = document.querySelector(`[data-agent="${agentType}"]`);
  selectedOption.classList.remove('border-[#2a2a2a]');
  selectedOption.classList.add('border-indigo-500', 'bg-indigo-500/5');
  
  // Update input section
  document.getElementById('inputLabel').textContent = config.inputLabel;
  document.getElementById('aiInput').placeholder = config.placeholder;
  
  // Show/hide tone section
  if (config.showTone) {
    document.getElementById('toneSection').classList.remove('hidden');
  } else {
    document.getElementById('toneSection').classList.add('hidden');
  }
  
  // Show/hide additional options
  if (config.showOptions) {
    document.getElementById('additionalOptions').classList.remove('hidden');
  } else {
    document.getElementById('additionalOptions').classList.add('hidden');
  }
  
  // Show input section and generate button
  document.getElementById('inputSection').classList.remove('hidden');
  document.getElementById('generateButton').classList.remove('hidden');
  document.getElementById('selectedAgentInfo').classList.remove('hidden');
  document.getElementById('selectedAgentName').textContent = config.name;
}

async function generateContent() {
  const input = document.getElementById('aiInput').value.trim();
  
  if (!input) {
    alert('Please enter some input');
    return;
  }
  
  const generateButton = document.getElementById('generateButton');
  const generateButtonText = document.getElementById('generateButtonText');
  
  generateButton.disabled = true;
  generateButtonText.textContent = 'Generating...';
  
  try {
    const context = {};
    
    // Add tone for post writer
    if (selectedAgent === 'post_writer') {
      context.tone = document.getElementById('toneSelect').value;
      context.word_count = document.getElementById('wordCount').value;
      context.keywords = document.getElementById('targetKeywords').value;
    }
    
    const response = await fetch(`/api/v1/ai_agents/execute/${selectedAgent}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        user_input: input,
        context: context
      })
    });
    
    const data = await response.json();
    
    if (data.success) {
      generatedContent = data.result;
      document.getElementById('aiResult').value = generatedContent;
      document.getElementById('resultSection').classList.remove('hidden');
      document.getElementById('insertButton').classList.remove('hidden');
      document.getElementById('errorSection').classList.add('hidden');
    } else {
      throw new Error(data.error);
    }
  } catch (error) {
    document.getElementById('errorMessage').textContent = error.message;
    document.getElementById('errorSection').classList.remove('hidden');
    document.getElementById('resultSection').classList.add('hidden');
  } finally {
    generateButton.disabled = false;
    generateButtonText.textContent = 'Generate Content';
  }
}

function insertContent() {
  if (!generatedContent) return;
  
  // Try to find the content editor
  const contentEditor = document.querySelector('textarea[name*="content"]') || 
                       document.querySelector('.editor-content') ||
                       document.querySelector('#content') ||
                       document.querySelector('[contenteditable="true"]');
  
  if (contentEditor) {
    if (contentEditor.tagName === 'TEXTAREA') {
      contentEditor.value = generatedContent;
    } else if (contentEditor.contentEditable === 'true') {
      contentEditor.innerHTML = generatedContent;
    }
    
    // Trigger change event
    contentEditor.dispatchEvent(new Event('input', { bubbles: true }));
    
    closeAiPopup();
  } else {
    // Fallback: copy to clipboard
    navigator.clipboard.writeText(generatedContent).then(() => {
      alert('Content copied to clipboard!');
    }).catch(() => {
      alert('Generated content:\n\n' + generatedContent);
    });
  }
}
</script>

<style>
.agent-option:hover {
  border-color: #6366f1 !important;
}

.agent-option.selected {
  border-color: #6366f1 !important;
  background-color: rgba(99, 102, 241, 0.05) !important;
}
</style>




